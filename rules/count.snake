
""" rules for scraps counting """
rule filterR2:
  input:
    "{results}/{sample}/{sample}_R2_Aligned.sortedByCoord.out.bam"
    #"{results}/counts/{sample}_R2.bam"
  output:
    "{results}/counts/{sample}_R2.bam"
    #"{results}/counts/{sample}_R2_filter.done"
  params:
    job_name = "filter",
    temp = "{results}/counts/{sample}_R2_filter.bam",
    memory = "select[mem>8] rusage[mem=8]" # LSF format; change as needed
  log:
    "logs/filter_{sample}_R2.txt"
  threads:
    4
  shell:
    """
    samtools view -h {input} | grep -v 'CB:Z:-\|UB:Z:-' | samtools view -b - > {params.temp}
    samtools index {params.temp}
    python3 inst/scripts/filter_bam.py -i {params.temp} -o {output}
    samtools index {output}
    rm -rf {params.temp}
    """

rule filterR1:
  input:
    "{results}/{sample}/{sample}_R1_Aligned.sortedByCoord.out.bam"
    #"{results}/counts/{sample}_R1.bam"
  output:
    "{results}/counts/{sample}_R1.bam"
    #"{results}/counts/{sample}_R1_filter.done"
  params:
    job_name = "filter",
    temp = "{results}/counts/{sample}_R1_filter.bam",
    memory = "select[mem>8] rusage[mem=8]" # LSF format; change as needed
  log:
    "logs/filter_{sample}_R1.txt"
  threads:
    4
  shell:
    """
    samtools view -h {input} | grep -v 'CB:Z:-\|UB:Z:-' | samtools view -b - > {params.temp}
    mv {params.temp} {output}
    samtools index {output}
    """

rule filterread1:
  input:
    "{results}/{sample}/{sample}_read1_Aligned.sortedByCoord.out.bam"
    #"{results}/counts/{sample}_read1.bam"
  output:
    "{results}/counts/{sample}_read1.bam"
    #"{results}/counts/{sample}_read1_filter.done"
  params:
    job_name = "filter",
    temp = "{results}/counts/{sample}_read1_filter.bam",
    memory = "select[mem>8] rusage[mem=8]" # LSF format; change as needed
  log:
    "logs/filter_{sample}_read1.txt"
  threads:
    4
  shell:
    """
    samtools view -h {input} | grep -v 'CB:Z:-\|UB:Z:-' | samtools view -b - > {params.temp}
    mv {params.temp} {output}
    samtools index {output}
    """

rule bedR1:
  input:
    "{results}/counts/{sample}_R1.bam",
    #"{results}/counts/{sample}_R1_filter.done"
  output:
    "{results}/counts/{sample}_R1.bed.gz"
  params:
    job_name = "bed",
    dedup = "{results}/counts/{sample}_R1_dedup.bam",
    r = "{results}/counts/{sample}_R1_r.bam",
    memory = "select[mem>72] rusage[mem=72]" # LSF format; change as needed
  log:
    "logs/bed_{sample}_R1.txt"
  threads:
    4
  shell:
    """
    # would need --paired if not previously filtered
    umi_tools dedup \
      --extract-umi-method=tag \
      --umi-tag=UB \
      --per-cell \
      --cell-tag=CB \
      --paired \
      -I {input} \
      -S {params.dedup} \
      > {log}
    
    samtools view -f 0x42 {params.dedup} -b > {params.r}
    bedtools genomecov -ibam {params.r} -5 -dz | gzip > {output}
    """

rule bedR2:
  input:
    "{results}/counts/{sample}_R2.bam",
    #"{results}/counts/{sample}_R2_filter.done"
  output:
    "{results}/counts/{sample}_R2.bed.gz"
  params:
    job_name = "bed",
    dedup = "{results}/counts/{sample}_R2_dedup.bam",
    memory = "select[mem>72] rusage[mem=72]" # LSF format; change as needed
  log:
    "logs/bed_{sample}_R2.txt"
  threads:
    4
  shell:
    """
    umi_tools dedup \
      --extract-umi-method=tag \
      --umi-tag=UB \
      --per-cell \
      --cell-tag=CB \
      -I {input} \
      -S {params.dedup} \
      > {log}

    bedtools genomecov -ibam {params.dedup} -3 -dz | gzip > {output}
    """

rule bedread1:
  input:
    "{results}/counts/{sample}_read1.bam",
    #"{results}/counts/{sample}_read1_filter.done"
  output:
    "{results}/counts/{sample}_read1.bed.gz"
  params:
    job_name = "bed",
    dedup = "{results}/counts/{sample}_read1_dedup.bam",
    memory = "select[mem>72] rusage[mem=72]" # LSF format; change as needed
  log:
    "logs/bed_{sample}_read1.txt"
  threads:
    4
  shell:
    """
    umi_tools dedup \
      --extract-umi-method=tag \
      --umi-tag=UB \
      --per-cell \
      --cell-tag=CB \
      -I {input} \
      -S {params.dedup} \
      > {log}

    bedtools genomecov -ibam {params.dedup} -5 -dz | gzip > {output}
    """
